from __future__ import absolute_import
from __future__ import print_function
from sqlalchemy import create_engine
from locust import User, between, TaskSet, task, events
import time
import configparser


config = configparser.ConfigParser()


def create_conn(conn_string):
    print("Connecting to ADB")
    return create_engine('postgresql+psycopg2://' + conn_string).connect()


def execute_query(conn_string, query):
    _conn = create_conn(conn_string)
    rs = _conn.execute(query)
    return rs


'''
  The ADB client that wraps the actual query
'''


class ADBClient:
    def __getattr__(self, name):
        def wrapper(*args, **kwargs):
            start_time = time.time()
            try:
                res = execute_query(*args, **kwargs)
                # print('Result ----------->' + str(res.fetchone()))
                events.request_success.fire(request_type="postgresql",
                                            name=name,
                                            response_time=int((time.time() - start_time) * 1000),
                                            response_length=res.rowcount)
            except Exception as e:
                events.request_failure.fire(request_type="postgresql",
                                            name=name,
                                            response_time=int((time.time() - start_time) * 1000),
                                            exception=e)

                print('error {}'.format(e))

        return wrapper


class CustomTaskSet(TaskSet):
    config.read('config.ini')
    conn_string = config['DEFAULT']['conn_string']


    @task(1)
    def friquent_query_1(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                        SELECT

    spark_id,

    inn,

    ogrn,

    kpp,

    okfs_code,

    okfs_name,

    okopf_name,

    full_name_rus,

    short_name_rus,

    status_name,

    first_registration_date,

    revenue,

    net_profit,

    net_assets,

    cast(net_profit_flag AS boolean) net_profit_flag,

    cast(net_assets_flag AS boolean) net_assets_flag,

    cast(debt_flag AS boolean) debt_flag,

    cast(rev_loss_flag AS boolean) rev_loss_flag,

    cast(tax_debt_flag AS boolean) tax_debt_flag,

    cast(fr_acc_flag AS boolean) fr_acc_flag,

    cast(bad_sup_flag AS boolean) bad_sup_flag,

    cast(inv_add_flag AS boolean) inv_add_flag,

    cast(cur_status_flag AS boolean) cur_status_flag,

    cast(age_flag AS boolean) age_flag,

    cast(ben_chg_flag AS boolean) ben_chg_flag,

    cast(gov_chg_flag AS boolean) gov_chg_flag,

    cast(dsq_flag AS boolean) dsq_flag,

    cast(abs_rep_flag AS boolean) abs_rep_flag,

    cast(inv_fnd_flag AS boolean) inv_fnd_flag,

    cast(inv_gov_flag AS boolean) inv_gov_flag,

    cast(bl_flag AS boolean) bl_flag,

    cast(bp_flag AS boolean) bp_flag,

    cast(arb_claim_flag AS boolean) arb_claim_flag,

    cast(arb_def_flag AS boolean) arb_def_flag,

    cast(staff_number_flag AS boolean) staff_number_flag,

    cast(rkn_license_flag AS boolean) rkn_license_flag,

    report_year,

    (

        CASE WHEN check_result = 'RED FLAG' THEN

            FALSE

        WHEN check_result = 'GREEN FLAG' THEN

            TRUE

        WHEN check_result = 'APPROVAL' THEN

            TRUE

        END) check_res,

    check_result,

    lim_calc

FROM

    snbx_creditroad.kaa_fin_revision_function_by_inn ('7802411618', '0') t

    /*select spark_id, full_name_rus

     from dl_spark.legal_entity_actual where inn = '7802411618'

     */

;
                                  '''
                                  )

    @task(2)
    def friquent_query_2(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                        SELECT 
                                            list_name, 
                                            is_negative, 
                                            status_name, 
                                            full_name_rus, 
                                            inn, 
                                            ogrn, 
                                            kpp 
                                        FROM dl_spark.get_spark_include_list ('7707049388', '', '');    
                                      '''
                                  )

    @task(3)
    def friquent_query_3(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                        SELECT  
                                            list_name, 
                                            is_negative, 
                                            status_name, 
                                            full_name_rus, 
                                            inn, 
                                            ogrn, 
                                            kpp 
                                        FROM dl_spark.get_spark_include_list ('3904085758', '', '');    
                                      '''
                                  )

    @task(4)
    def friquent_query_4(self):
        self.client.execute_query(self.conn_string,
                                 '''
                                      SELECT "spark_id",
		 "balance_type",
		 "accounting_period_code",
		 "form_name",
		 "financial_indicator_code",
		 "valid_from",
		 "section_name",
		 "line_code",
		 "line_name",
		 "line_value",
		 "deleted_flag"
FROM dl_spark.ACCOUNTING_REPORT
WHERE ( ( ( "spark_id" IN ( 262342 , 262425 , 262465 , 262745 , 262816 , 262866 , 262906 , 262925 , 262944 , 263014 , 263099 , 263349 , 263357 , 263524 , 263551 , 263639 , 263683 , 263734 , 263737 , 263813 , 263976 , 263978 , 264015 , 264122 , 264202 , 264558 , 264565 , 264585 , 264707 , 264711 , 264714 , 264756 , 264786 , 264827 , 264832 , 264851 , 264911 , 264978 , 265048 , 265142 , 265183 , 265268 , 265371 , 265380 , 265411 , 265412 , 265442 , 265453 , 265597 , 265617 , 265625 , 265645 , 265769 , 265872 , 265922 , 265927 , 265971 , 266115 , 266141 , 266144 , 266263 , 266346 , 266453 , 266654 , 266789 , 267091 , 267268 , 267336 , 267437 , 267462 , 267522 , 267618 , 267620 , 267670 , 267752 , 268006 , 268157 , 268267 , 268268 , 268283 , 268343 , 268522 , 268687 , 268850 , 269250 , 269583 , 269591 , 269627 , 269655 , 269659 , 269696 , 269748 , 269762 , 269763 , 269772 , 269781 , 269782 , 269793 , 269817 , 269854 , 270147 , 270160 , 270701 , 270808 , 270829 , 271151 , 271237 , 271409 , 271449 , 271485 , 271638 , 271976 , 272140 , 272208 , 272382 , 272419 , 272437 , 272598 , 272677 , 272845 , 272873 , 272882 , 272973 , 273024 , 273277 , 273314 , 273463 , 273473 , 273519 , 273672 , 273723 , 274349 , 274458 , 274516 , 274524 , 274525 , 274541 , 274558 , 274566 , 274612 , 274709 , 274740 , 274769 , 274844 , 275012 , 275022 , 275041 , 275367 , 275381 , 275470 , 275484 , 275573 , 275622 , 275663 , 275727 , 275767 , 275812 , 276143 , 276670 , 276677 , 276702 , 276844 , 276846 , 276915 , 277053 , 277115 , 277483 , 277555 , 277574 , 277629 , 277653 , 278060 , 278774 , 278906 , 279072 , 279108 , 279208 , 279374 , 279417 , 279577 , 279675 , 279692 , 279700 , 279717 , 279920 , 279945 , 279996 , 280017 , 280050 , 280087 , 280115 , 280144 , 280174 , 280392 , 280448 , 280751 , 280842 , 281072 , 281217 , 281584 , 281690 , 281850 , 281881 , 282071 , 282091 , 282196 , 282296 , 282331 , 282363 , 282437 , 282791 , 283051 , 283116 , 283613 , 283820 , 284022 , 284081 , 284185 , 284200 , 284253 , 284256 , 284278 , 284323 , 284375 , 284420 , 284486 , 284553 , 284626 , 285087 , 285354 , 285412 , 285578 , 285767 , 285788 , 286133 , 286410 , 286472 , 286632 , 286847 , 287020 , 287054 , 287545 , 288082 , 288118 , 288227 , 288243 , 288270 , 288424 , 288538 , 288559 , 288561 , 288566 , 288594 , 288659 , 288724 ) )
		OR ( "spark_id" IN ( 288727 , 288809 , 288859 , 288873 , 289014 , 289032 , 289098 , 289105 , 289117 , 289267 , 289388 , 289410 , 289518 , 289690 , 289752 , 289862 , 289878 , 289974 , 289975 , 290344 , 290441 , 290506 , 290643 , 290801 , 290805 , 290818 , 290833 , 290885 , 290927 , 290933 , 290968 , 290992 , 291017 , 291106 , 291173 , 291215 , 291219 , 291332 , 291396 , 291437 , 291450 , 291479 , 291523 , 291524 , 291606 , 291619 , 291700 , 291710 , 291715 , 291768 , 291900 , 292000 , 292017 , 292287 , 292396 , 292440 , 292727 , 292741 , 292790 , 292865 , 292877 , 292901 , 292944 , 292974 , 292993 , 293071 , 293111 , 293197 , 293413 , 293446 , 293552 , 294061 , 294140 , 294350 , 294533 , 294864 , 294895 , 295167 , 295188 , 295404 , 295458 , 295630 , 295698 , 295786 , 295787 , 296267 , 296268 , 296290 , 296343 , 296425 , 296426 , 296442 , 296473 , 296522 , 296585 , 296592 , 296626 , 296708 , 296811 , 296830 , 296832 , 296854 , 296871 , 296899 , 296977 , 296990 , 297017 , 297021 , 297044 , 297055 , 297057 , 297081 , 297296 , 297413 , 297547 , 297608 , 297683 , 297867 , 297929 , 297957 , 298007 , 298025 , 298054 , 298104 , 298105 , 298157 , 298169 , 298181 , 298189 , 298257 , 298358 , 298459 , 298583 , 298585 , 298594 , 298761 , 298929 , 298986 , 299058 , 299098 , 299324 , 300088 , 300231 , 300240 , 300317 , 300383 , 300390 , 300392 , 300406 , 300427 , 300484 , 300490 , 300496 , 300497 , 300503 , 300512 , 300524 , 300536 , 300653 , 300929 , 300939 , 301037 , 301060 , 301084 , 301086 , 301091 , 301251 , 301252 , 301756 , 301960 , 302049 , 302327 , 302515 , 302909 , 303064 , 303627 , 303697 , 303701 , 303958 , 304085 , 304090 , 304190 , 304203 , 304306 , 304499 , 304683 , 304749 , 305000 , 305034 , 305073 , 305179 , 305253 , 305429 , 305779 , 305824 , 305895 , 305920 , 305937 , 306065 , 306089 , 306119 , 306142 , 306143 , 306279 , 306553 , 306649 , 306689 , 306740 , 307230 , 307245 , 307314 , 307422 , 307491 , 307496 , 307526 , 307558 , 307630 , 307645 , 307661 , 307719 , 307763 , 307767 , 307853 , 307951 , 308047 , 308133 , 308135 , 308176 , 308194 , 308195 , 308298 , 308341 , 308609 , 308819 , 308919 , 309231 , 309242 , 309489 , 309799 , 309928 , 309933 , 309939 , 309949 , 309974 , 310017 , 310060 , 310124 , 310154 , 310260 , 310432 , 310537 , 310608 , 310652 , 310687 , 310708 ) )
		OR ( "spark_id" IN ( 310735 , 310763 , 310785 , 310793 , 310824 , 310961 , 311011 , 311023 , 311031 , 311051 , 311067 , 311070 , 311101 , 311102 , 311108 , 311123 , 311176 , 311195 , 311198 , 311208 , 311479 , 311488 , 311543 , 311553 , 311801 , 312264 , 312707 , 312964 , 313028 , 313038 , 313182 , 313388 , 313491 , 313523 , 313534 , 313557 , 313592 , 313610 , 313635 , 313765 , 313771 , 313833 , 314430 , 314475 , 314598 , 314960 , 315021 , 315039 , 315259 , 315405 , 315738 , 315867 , 315964 , 316068 , 316146 , 316285 , 316331 , 316346 , 316353 , 316433 , 316484 , 316724 , 316775 , 316822 , 317212 , 317227 , 317405 , 317408 , 317422 , 317538 , 317580 , 317586 , 317601 , 317695 , 317776 , 317791 , 318269 , 318598 , 318761 , 318764 , 318854 , 318892 , 319047 , 319068 , 319261 , 319275 , 319383 , 319398 , 319421 , 319710 , 319822 , 319838 , 319845 , 319857 , 319913 , 319996 , 320005 , 320031 , 320324 , 320373 , 320565 , 320591 , 320596 , 320975 , 321039 , 321414 , 321541 , 321776 , 321810 , 322014 , 322680 , 322891 , 322959 , 323140 , 323185 , 323542 , 323574 , 324101 , 324122 , 324214 , 324305 , 324310 , 324335 , 324341 , 324487 , 324909 , 324999 , 325009 , 325129 , 325132 , 325136 , 325157 , 325192 , 325252 , 325274 , 325382 , 325464 , 325610 , 325658 , 325675 , 325687 , 325709 , 325728 , 325767 , 326169 , 326350 , 326478 , 326582 , 326623 , 326629 , 326630 , 326997 , 327373 , 327388 , 327402 , 327423 , 327687 , 327699 , 327706 , 327889 , 327967 , 328004 , 328010 , 328032 , 328057 , 328072 , 328211 , 328279 , 328306 , 328329 , 328456 , 328491 , 328563 , 328639 , 328642 , 328705 , 328719 , 328752 , 329259 , 329346 , 329520 , 329586 , 329615 , 329709 , 329895 , 330748 , 330792 , 330900 , 331086 , 331158 , 331170 , 331223 , 331256 , 331496 , 331564 , 331614 , 331685 , 331796 , 331803 , 331890 , 332176 , 332211 , 332324 , 332917 , 333186 , 333187 , 333247 , 333420 , 333424 , 333486 , 333551 , 333581 , 333712 , 333779 , 333807 , 333836 , 334007 , 334084 , 334137 , 334179 , 334201 , 334255 , 334292 , 334372 , 334497 , 334523 , 334695 , 334825 , 334868 , 334956 , 334995 , 335048 , 335054 , 335081 , 335095 , 335169 , 335228 , 335315 , 335347 , 335409 , 335533 , 335600 , 335608 , 335639 , 335667 , 335680 , 335730 , 335753 , 335755 , 335836 , 336014 , 336025 , 336030 , 336051 , 336084 ) )
		OR ( "spark_id" IN ( 336170 , 336255 , 336474 , 336508 , 336564 , 336600 , 336634 , 336822 , 336928 , 336956 , 336960 , 336997 , 337076 , 337266 , 337296 , 337352 , 337421 , 337455 , 337683 , 337697 , 337710 , 337889 , 338000 , 338187 , 338366 , 338405 , 338488 , 338709 , 338757 , 338810 , 338838 , 339063 , 339071 , 339222 , 339348 , 339405 , 339458 , 339492 , 339678 , 339693 , 339745 , 339750 , 339787 , 339908 , 340065 , 340071 , 340125 , 340129 , 340183 , 340273 , 340302 , 340361 , 340500 , 340751 , 340755 , 340854 , 341009 , 341128 , 341174 , 341214 , 341227 , 341373 , 341401 , 341465 , 341594 , 341720 , 341751 , 341813 , 341920 , 341934 , 341943 , 342220 , 342465 , 342555 , 342601 , 342782 , 342978 , 343078 , 343163 , 343177 , 343261 , 343395 , 343565 , 343760 , 343877 , 343989 , 344190 , 344217 , 344228 , 344233 , 344279 , 344399 , 344434 , 344451 , 344573 , 344670 , 344934 , 344976 , 345661 , 345856 , 346330 , 346380 , 346566 , 346797 , 347014 , 347041 , 347145 , 347179 , 347184 , 347257 , 347266 , 347308 , 347317 , 347347 , 347370 , 347383 , 347444 , 347656 , 347735 , 347828 , 347867 , 348124 , 348177 , 348184 , 348193 , 348879 , 348933 , 348971 , 349089 , 349099 , 349339 , 349509 , 349517 , 349664 , 349972 , 350003 , 350117 , 350312 , 350338 , 350521 , 350541 , 350674 , 350683 , 350755 , 351014 , 351116 , 351133 , 351253 , 351476 , 352363 , 352583 , 352657 , 352722 , 352726 , 352752 , 352904 , 352997 , 353010 , 353336 , 353366 , 353383 , 353423 , 353454 , 353594 , 353631 , 353670 , 353689 , 354668 , 354771 , 354939 , 355080 , 355184 , 356326 , 357466 , 357522 , 357552 , 357656 , 357703 , 357727 , 357761 , 357792 , 358013 , 358485 , 358540 , 358543 , 358573 , 359317 , 359325 , 359360 , 359368 , 359393 , 359692 , 359943 , 360027 , 360059 , 360207 , 360274 , 360501 , 360580 , 360590 , 360650 , 360702 , 360806 , 360911 , 360994 , 361002 , 361160 , 361356 , 361559 , 361642 , 361808 , 361832 , 361868 , 361905 , 361962 , 361987 , 361995 , 362037 , 362057 , 362181 , 362256 , 362267 , 362471 , 362485 , 362533 , 362595 , 362602 , 362660 , 362724 , 362796 , 362845 , 362853 , 362911 , 363258 , 363296 , 363372 , 363416 , 363459 , 363507 , 363518 , 363542 , 363548 , 363587 , 363596 , 363924 , 364024 , 364357 , 365023 , 365037 , 365044 , 365318 , 365442 , 365494 , 366335 , 367035 ) )
		OR ( "spark_id" IN ( 367421 , 367539 , 367620 , 367649 , 367702 , 367713 , 367751 , 367766 , 367861 , 367971 , 367990 , 368070 , 368094 , 368194 , 368376 , 368393 , 368401 , 368510 , 368616 , 368644 , 368726 , 368754 , 368815 , 368830 , 368937 , 369153 , 369233 , 369344 , 369442 , 369473 , 369492 , 369590 , 369631 , 369763 , 369802 , 369992 , 370075 , 370244 , 370421 , 370607 , 370714 , 370760 , 370804 , 370840 , 370846 , 370877 , 370882 , 370904 , 370955 , 371014 , 371031 , 371139 , 371207 , 371239 , 371307 , 371463 , 371482 , 371719 , 371722 , 371856 , 372042 , 372185 , 372296 , 372345 , 372405 , 372453 , 372472 , 372742 , 372915 , 372920 , 373064 , 373143 , 373257 , 373260 , 373413 , 373789 , 373794 , 373976 , 374000 , 374170 , 374229 , 374258 , 374330 , 374349 , 374450 , 374465 , 374570 , 374670 , 374776 , 374813 , 374833 , 375003 , 375061 , 375076 , 375308 , 375443 , 375518 , 375548 , 375657 , 375801 , 375953 , 375990 , 376019 , 376078 , 376143 , 376148 , 376234 , 376236 , 376460 , 376597 , 376614 , 376630 , 376727 , 376730 , 376755 , 376758 , 376848 , 376927 , 377131 , 377156 , 377171 , 377175 , 377176 , 377323 , 377446 , 377534 , 377781 , 377885 , 377886 , 378480 , 378481 , 378646 , 378986 , 378990 , 378991 , 379330 , 379359 , 379492 , 379616 , 380013 , 380149 , 380812 , 380944 , 381165 , 381284 , 381564 , 381581 , 381589 , 381646 , 381695 , 381722 , 381741 , 381794 , 381883 , 381956 , 382083 , 382085 , 382175 , 382426 , 382902 , 383079 , 383210 , 383224 , 383450 , 383830 , 383894 , 384529 , 384603 , 385005 , 385154 , 385461 , 385872 , 385986 , 386168 , 386194 , 386258 , 386280 , 386380 , 386386 , 386393 , 386406 , 386433 , 386512 , 386519 , 386638 , 386647 , 386771 , 386868 , 387419 , 387604 , 387763 , 387947 , 387949 , 387974 , 388098 , 388503 , 388612 , 388780 , 388840 , 388860 , 388929 , 388934 , 388936 , 389221 , 389322 , 389524 , 389602 , 389751 , 389761 , 389928 , 390081 , 390161 , 390259 , 390407 , 390429 , 390494 , 390495 , 390611 , 390898 , 390914 , 390999 , 391214 , 391252 , 391289 , 391539 , 391659 , 391668 , 391695 , 392219 , 392303 , 392541 , 392859 , 392922 , 393387 , 393392 , 393526 , 393557 , 393583 , 393811 , 393884 , 393912 , 393941 , 394208 , 394232 , 394289 , 394351 , 394503 , 394513 , 394649 , 394664 , 394719 , 394747 , 394772 , 394847 , 394848 ) )
		OR ( "spark_id" IN ( 395021 , 395189 , 395659 , 395672 , 395695 , 395737 , 395747 , 395749 , 395803 , 395808 , 395883 , 395893 , 396405 , 396674 , 396678 , 397137 , 397175 , 397245 , 397368 , 397440 , 397466 , 397596 , 397650 , 397698 , 397788 , 397797 , 397831 , 397866 , 398033 , 398313 , 398768 , 398946 , 399167 , 399190 , 399233 , 399240 , 399474 , 399505 , 399777 , 399923 , 399992 , 400047 , 400338 , 400407 , 400529 , 400751 , 400840 , 400845 , 400850 , 400857 , 400898 , 400906 , 401080 , 401093 , 401094 , 401269 , 401284 , 401308 , 401372 , 401457 , 401467 , 401471 , 401566 , 401724 , 402056 , 402176 , 402178 , 402215 , 402292 , 402390 , 402521 , 402559 , 402671 , 403010 , 403043 , 403132 , 403143 , 403267 , 403354 , 403358 , 403474 , 403540 , 403602 , 403989 , 404160 , 404572 , 404734 , 404924 , 405246 , 405337 , 405354 , 405516 , 405570 , 405609 , 405960 , 405997 , 406064 , 406634 , 406683 , 406931 , 407156 , 407654 , 407727 , 407729 , 407872 , 407877 , 407988 , 407991 , 408136 , 408193 , 408413 , 408647 , 408683 , 408693 , 408943 , 409108 , 409111 , 409203 , 409368 , 409379 , 409426 , 409485 , 409697 , 409741 , 409758 , 409907 , 410027 , 410028 , 410091 , 410142 , 410415 , 410441 , 410521 , 410571 , 410590 , 410603 , 410639 , 410760 , 411008 , 411074 , 411153 , 411198 , 411240 , 411412 , 411575 , 411605 , 411730 , 411807 , 411808 , 411822 , 412172 , 412266 , 412402 , 412420 , 412655 , 413071 , 413112 , 413225 , 413313 , 413425 , 413508 , 413519 , 413530 , 413776 , 414410 , 414438 , 414756 , 414789 , 414860 , 414992 , 414993 , 414996 , 415000 , 415113 , 415145 , 415148 , 415289 , 415353 , 415437 , 415583 , 415624 , 415641 , 415837 , 415850 , 415862 , 415906 , 415973 , 415976 , 416228 , 416270 , 416492 , 416522 , 416551 , 416558 , 416574 , 416647 , 416656 , 416714 , 416722 , 416790 , 416915 , 416930 , 417059 , 417194 , 417196 , 417264 , 417495 , 417509 , 417520 , 417575 , 417666 , 417691 , 417709 , 417813 , 417842 , 417875 , 417887 , 417893 , 417940 , 417992 , 418039 , 418042 , 418091 , 418267 , 418396 , 418399 , 418413 , 418442 , 418453 , 418478 , 418520 , 418610 , 418761 , 418777 , 418951 , 418976 , 418986 , 419115 , 419175 , 419341 , 419374 , 419578 , 419763 , 420141 , 420229 , 420377 , 421086 , 421523 , 421562 , 421656 , 421764 , 421787 , 421883 , 421897 , 422496 ) )
		OR ( "spark_id" IN ( 422587 , 422723 , 422958 , 423186 , 423312 , 423361 , 423364 , 423394 , 423460 , 423779 , 423790 , 424838 , 424916 , 424991 , 425009 , 425020 , 425057 , 425128 , 425403 , 425485 , 425501 , 425560 , 425573 , 425631 , 425882 , 425884 , 425949 , 425973 , 426098 , 426404 , 426412 , 426565 , 426574 , 426665 , 426666 , 426735 , 427014 , 427131 , 427282 , 427686 , 427696 , 427994 , 428002 , 428107 , 428404 , 428569 , 428719 , 428721 , 428784 , 428860 , 429032 , 429239 , 429317 , 429411 , 429433 , 429470 , 429614 , 429669 , 429745 , 429801 , 429848 , 429935 , 430062 , 430085 , 430136 , 430286 , 430335 , 430954 , 430994 , 431011 , 431015 , 431021 , 431145 , 431173 , 431405 , 431544 , 431560 , 431794 , 432054 , 432175 , 432189 , 432229 , 432468 , 432482 , 432557 , 432654 , 432679 , 432681 , 432693 , 432856 , 432880 , 432893 , 433281 , 433300 , 433353 , 433625 , 433945 , 434377 , 434482 , 434495 , 434568 , 434692 , 434762 , 435299 , 435326 , 435577 , 435598 , 435785 , 435851 , 435859 , 435956 , 435974 , 436036 , 436087 , 436139 , 436187 , 436210 , 436305 , 436375 , 436407 , 436516 , 436800 , 436879 , 437000 , 437064 , 437146 , 437240 , 437268 , 437397 , 437423 , 437623 , 437710 , 437760 , 438044 , 438305 , 438375 , 438515 , 438601 , 438666 , 438853 , 438890 , 438964 , 438995 , 439125 , 439208 , 439313 , 439339 , 439347 , 439392 , 439542 , 439544 , 439944 , 440144 , 440232 , 440282 , 440305 , 440364 , 440374 , 440418 , 440898 , 440981 , 440982 , 441045 , 441064 , 441187 , 441520 , 441691 , 441742 , 441932 , 442094 , 442173 , 442298 , 442399 , 442518 , 442638 , 442710 , 443075 , 443298 , 443404 , 443460 , 443662 , 443750 , 443928 , 443931 , 443949 , 444003 , 444381 , 444571 , 444708 , 444894 , 444973 , 444993 , 445044 , 445046 , 445101 , 445116 , 445242 , 445252 , 445308 , 445366 , 445390 , 445580 , 445609 , 445671 , 445713 , 445799 , 445932 , 446545 , 446557 , 446625 , 446627 , 446647 , 446877 , 446944 , 446982 , 447001 , 447162 , 447180 , 447267 , 447268 , 447303 , 447305 , 447533 , 447586 , 447646 , 447679 , 447695 , 447704 , 447746 , 447778 , 447809 , 447913 , 447927 , 447987 , 448145 , 448152 , 448262 , 448267 , 448281 , 448294 , 448297 , 448301 , 448304 , 448317 , 448332 , 448383 , 448389 , 448417 , 448464 , 448568 , 448607 , 448638 , 448642 , 449316 , 449322 ) )
		OR ( "spark_id" IN ( 449366 , 449597 , 449628 , 449852 , 449862 , 449925 , 449936 , 450000 , 450073 , 450210 , 450419 , 450538 , 450646 , 450696 , 451004 , 451180 , 451334 , 451360 , 451380 , 451482 , 451599 , 451648 , 451685 , 451832 , 452003 , 452375 , 452489 , 452551 , 452846 , 452873 , 452920 , 452932 , 453121 , 453123 , 453158 , 453222 , 453223 , 453243 , 453457 , 453557 , 453605 , 453909 , 454206 , 454335 , 454697 , 454817 , 454888 , 454935 , 455094 , 455247 , 455405 , 455444 , 455536 , 455735 , 455808 , 455856 , 455907 , 455956 , 455973 , 456185 , 456242 , 456246 , 456506 , 456545 , 456565 , 456571 , 456587 , 456596 , 456606 , 456613 , 456667 , 457177 , 457315 , 457342 , 457362 , 457577 , 457603 , 457610 , 457825 , 457858 , 457884 , 458042 , 458509 , 458730 , 458825 , 458838 , 458880 , 459272 , 459299 , 459348 , 459429 , 459639 , 459655 , 459745 , 459958 , 460092 , 460180 , 460341 , 460382 , 460563 , 460810 , 461008 , 461017 , 461072 , 461205 , 461214 , 461328 , 461344 , 461363 , 461398 , 461571 , 461652 , 461773 , 461931 , 462116 , 462152 , 462216 , 462251 , 462265 , 462330 , 462338 , 462387 , 462388 , 462429 , 462488 , 462519 , 462601 , 462609 , 462741 , 462934 , 463375 , 463440 , 463460 , 463665 , 463674 , 463733 , 463833 , 463896 , 463935 , 463939 , 464258 , 464574 , 465341 , 465698 , 465947 , 465966 , 466077 , 466107 , 466157 , 466221 , 466251 , 466259 , 466438 , 466560 , 466651 , 466669 , 466715 , 466804 , 466807 , 466997 , 467008 , 467244 , 467377 , 467561 , 467867 , 468438 , 468490 , 468714 , 468998 , 469172 , 469217 , 469263 , 469330 , 469335 , 469358 , 469429 , 469551 , 469624 , 469644 , 469692 , 469761 , 470003 , 470026 , 470069 , 470121 , 470153 , 470424 , 470427 , 470475 , 470514 , 470660 , 470911 , 470990 , 471054 , 471155 , 471236 , 471338 , 471584 , 471795 , 471804 , 471818 , 472691 , 472786 , 472925 , 472963 , 473005 , 473136 , 473169 , 473366 , 473435 , 473731 , 473755 , 474140 , 474474 , 474795 , 474895 , 474911 , 474937 , 475030 , 475090 , 475173 , 475209 , 475257 , 475258 , 475333 , 475419 , 475423 , 475556 , 475838 , 476074 , 476118 , 476385 , 476591 , 476838 , 476840 , 476842 , 476931 , 476954 , 476958 , 477004 , 477011 , 477030 , 477249 , 477343 , 477404 , 477472 , 477842 , 477854 , 477860 , 477982 , 478015 , 478186 , 478227 , 478335 , 478415 ) )
		OR ( "spark_id" IN ( 478593 , 478596 , 478808 , 478927 , 478932 , 478974 , 479216 , 479233 , 479324 , 479596 , 479603 , 479616 , 480139 , 480193 , 480365 , 480399 , 480433 , 480443 , 480454 , 480657 , 480686 , 480695 , 480696 , 480771 , 480843 , 480947 , 480956 , 480964 , 481051 , 481392 , 481818 , 481873 , 482042 , 482070 , 482118 , 482134 , 482644 , 482689 , 483113 , 483129 , 483141 , 483269 , 483286 , 483333 , 483441 , 483463 , 483600 , 483651 , 483706 , 483933 , 484107 , 484160 , 484294 , 484362 , 484463 , 484472 , 484548 , 484712 , 484751 , 484753 , 484792 , 484814 , 484835 , 484884 , 484885 , 484893 , 485075 , 485210 , 485221 , 485367 , 485413 , 485438 , 485528 , 485721 , 485740 , 485765 , 485887 , 485895 , 485947 , 485949 , 486004 , 486174 , 486240 , 486271 , 486303 , 486321 , 486326 , 486387 , 486568 , 486861 , 486892 , 486941 , 486970 , 486996 , 487016 , 487073 , 487205 , 487311 , 487408 , 487516 , 487851 , 487939 , 487999 , 488134 , 488245 , 488257 , 488371 , 488386 , 488771 , 488857 , 488932 , 489077 , 489332 , 489951 , 490148 , 490157 , 490238 , 490266 , 490294 , 490327 , 490432 , 490456 , 490596 , 490658 , 490766 , 490770 , 490784 , 490816 , 490831 , 490832 , 490891 , 490896 , 490937 , 490971 , 491018 , 491127 , 491129 , 491271 , 491399 , 491530 , 491607 , 491644 , 491679 , 491727 , 491757 , 491994 , 492095 , 492173 , 492202 , 492589 , 492620 , 492687 , 492713 , 492775 , 492855 , 492943 , 493033 , 493063 , 493074 , 493138 , 493139 , 493246 , 493249 , 493282 , 493309 , 493429 , 493508 , 493569 , 493583 , 493596 , 493729 , 493824 , 494097 , 494123 , 494128 , 494343 , 494345 , 494435 , 494471 , 494492 , 494579 , 494699 , 494852 , 495189 , 495367 , 495443 , 495557 , 495897 , 495909 , 495996 , 496170 , 496561 , 497164 , 497320 , 497371 , 497378 , 497456 , 497472 , 497494 , 497783 , 497874 , 498203 , 498204 , 498205 , 498311 , 498403 , 498707 , 499045 , 499137 , 499540 , 499548 , 499557 , 499622 , 499891 , 500149 , 500348 , 500547 , 500647 , 500699 , 501002 , 501138 , 501346 , 501350 , 501487 , 501552 , 501919 , 501970 , 502196 , 502441 , 502533 , 502804 , 502900 , 503012 , 503059 , 503089 , 503119 , 503226 , 503279 , 503298 , 503431 , 503437 , 503514 , 503613 , 503637 , 503652 , 503684 , 503689 , 503697 , 503698 , 503710 , 503812 , 504037 , 504043 , 504046 , 504174 ) )
		OR ( "spark_id" IN ( 504271 , 504340 , 504379 , 504432 , 504551 , 504582 , 504646 , 504660 , 504734 , 504864 , 504916 , 505003 , 505557 , 506117 , 506158 , 506258 , 506352 , 506424 , 506471 , 506549 , 506764 , 506872 , 506877 , 506922 , 507054 , 507180 , 507537 , 507849 , 507931 , 508030 , 508263 , 508390 , 509030 , 509151 , 509248 , 509274 , 509321 , 509356 , 510166 , 510236 , 510237 , 510482 , 510506 , 510520 , 510560 , 510590 , 510679 , 510704 , 510736 , 510740 , 510755 , 510760 , 510781 , 510795 , 510990 , 511004 , 511127 , 511226 , 511276 , 511302 , 511395 , 511429 , 511615 , 511815 , 511864 , 511873 , 511906 , 512011 , 512233 , 512483 , 512613 , 512850 , 512853 , 512882 , 513130 , 513289 , 513302 , 513476 , 513541 , 513542 , 513694 , 513751 , 513832 , 513872 , 513996 , 514072 , 514097 , 514114 , 514120 , 514158 , 514546 , 514630 , 514660 , 514698 , 514720 , 514956 , 514963 , 514964 , 515038 , 515182 , 515189 , 515441 , 515921 , 516199 , 516303 , 516703 , 516718 , 516742 , 516846 , 517001 , 517167 , 517340 , 517381 , 517509 , 517720 , 517864 , 517904 , 518088 , 518117 , 518172 , 518227 , 518245 , 518274 , 518318 , 518353 , 518383 , 518451 , 518641 , 518931 , 518957 , 519044 , 520075 , 520162 , 520734 , 520841 , 520859 , 521096 , 521104 , 521140 , 521362 , 521561 , 521828 , 521956 , 522485 , 522591 , 522592 , 522669 , 522760 , 522848 , 522857 , 522892 , 522904 , 522953 , 523193 , 523522 , 523592 , 523600 , 523602 , 523639 , 523901 , 524036 , 524063 , 524106 , 524521 , 524535 , 524536 , 524718 , 524773 , 524901 , 525034 , 525150 , 525172 , 525226 , 525342 , 525347 , 525384 , 525485 , 525815 , 525848 , 525907 , 525945 , 526107 , 526120 , 526232 , 526260 , 526266 , 526363 , 526419 , 526425 , 526474 , 526632 , 526863 , 526868 , 526981 , 527242 , 527608 , 527662 , 527697 , 527795 , 528076 , 528078 , 528093 , 528315 , 528353 , 528356 , 528542 , 528593 , 528594 , 528677 , 528791 , 528890 , 528909 , 529227 , 529742 , 529792 , 530049 , 530151 , 530265 , 530358 , 530377 , 530384 , 530422 , 530513 , 530675 , 530714 , 530734 , 531121 , 531167 , 531297 , 531336 , 531383 , 531583 , 531632 , 531856 , 531963 , 532237 , 532306 , 532348 , 532521 , 532624 , 532671 , 532746 , 532801 , 532934 , 533004 , 533052 , 533189 , 533472 , 533634 , 533749 , 533795 , 533829 , 533846 , 533851 , 533944 ) )
		OR ( "spark_id" IN ( 534096 , 534140 , 534531 , 534707 , 534787 , 534845 , 534861 , 535135 , 535241 , 535294 , 535300 , 535490 , 535577 , 535646 , 535935 , 536148 , 536429 , 536445 , 536632 , 536916 , 537197 , 537299 , 537309 , 537717 , 537725 , 537937 , 538717 , 538804 , 538961 , 538967 , 539105 , 539111 , 539214 , 539243 , 539374 , 539483 , 539501 , 539792 , 539833 , 539986 , 540035 , 540264 , 540466 , 540503 , 540595 , 540660 , 540772 , 540777 , 540795 , 540934 , 540955 , 541010 , 541108 , 541158 , 541178 , 541302 , 541409 , 541453 , 541766 , 542199 , 542766 , 542769 , 542898 , 543933 , 543975 , 544071 , 544106 , 544153 , 544261 , 544370 , 544500 , 544672 , 544750 , 544927 , 545169 , 545178 , 545250 , 545314 , 545370 , 545451 , 545453 , 545459 , 545555 , 545662 , 545674 , 545715 , 545829 , 545934 , 546045 , 546157 , 546322 , 546439 , 546495 , 546496 , 546736 , 546933 , 546948 , 547005 , 547061 , 547072 , 547249 , 547276 , 547759 , 548472 , 548490 , 548543 , 548988 , 549276 , 549307 , 549400 , 549561 , 549563 , 549619 , 549769 , 550170 , 550280 , 550369 , 550543 , 550606 , 551495 , 551756 , 551861 , 552052 , 552272 , 552289 , 552363 , 552394 , 552404 , 552601 , 552694 , 552746 , 552780 , 552942 , 553320 , 553343 , 553469 , 553635 , 553870 , 553971 , 554038 , 554073 , 554075 , 554104 , 554112 , 554199 , 554298 , 554437 , 554604 , 554760 , 554800 , 555473 , 555528 , 555672 , 555720 , 555765 , 555947 , 556317 , 556393 , 556536 , 557185 , 557385 , 557406 , 557480 , 557592 , 557626 , 557850 , 558366 , 558374 , 558376 , 558441 , 558468 , 558503 , 558591 , 559646 , 559737 , 559744 , 560000 , 560031 , 560164 , 560213 , 560311 , 560504 , 560529 , 560545 , 560547 , 560564 , 560633 , 560731 , 560935 , 560936 , 561210 , 561245 , 561357 , 561414 , 561546 , 561565 , 561815 , 562142 , 562171 , 562265 , 562313 , 562403 , 562527 , 562559 , 562565 , 562641 , 562707 , 562803 , 562813 , 563209 , 563263 , 563289 , 563303 , 563442 , 565239 , 565331 , 565419 , 565465 , 565662 , 565665 , 565680 , 565743 , 565751 , 565954 , 565964 , 566003 , 566021 , 566082 , 566204 , 566382 , 566425 , 566534 , 566714 , 566780 , 566788 , 566872 , 567039 , 567173 , 567354 , 567366 , 567370 , 567377 , 567548 , 567753 , 567777 , 567806 , 567826 , 567836 , 568057 , 568340 , 568343 , 568619 , 568892 , 568894 , 568905 ) )
		OR ( "spark_id" IN ( 569046 , 569367 , 569634 , 569641 , 569935 , 570075 , 570320 , 570322 , 570362 , 570462 , 570468 , 570535 , 570588 , 570689 , 571206 , 571209 , 571440 , 571562 , 571958 , 572461 , 572516 , 572949 , 573680 , 573698 , 574168 , 574297 , 574549 , 574567 , 574615 , 574634 , 574647 , 574665 , 574724 , 574725 , 574749 , 574889 , 574908 , 575102 , 575608 , 575670 , 575697 , 575741 , 576052 , 576096 , 576105 , 576377 , 576454 , 577047 , 577242 , 577482 , 577559 , 577695 , 577713 , 577878 , 577940 , 577951 , 577954 , 578109 , 578132 , 578403 , 578582 , 578584 , 578752 , 578763 , 578817 , 579129 , 579160 , 579163 , 579229 , 579271 , 579532 , 579644 , 579724 , 579804 , 579881 , 579945 , 579983 , 580087 , 580140 , 580492 , 580521 , 580711 , 580719 , 580906 , 580952 , 581089 , 581159 , 581177 , 581322 , 581376 , 581479 , 581489 , 581545 , 582211 , 582305 , 582357 , 582451 , 582453 , 582458 , 582464 , 582545 , 583025 , 583219 , 583384 , 583523 , 584136 , 584138 , 584255 , 584435 , 584468 , 584499 , 584727 , 584897 , 584903 , 585075 , 585684 , 585731 , 586040 , 587206 , 587337 , 587343 , 587390 , 587756 , 587789 , 588064 , 588069 , 588071 , 588299 , 588322 , 588549 , 588572 , 588862 , 588884 , 588955 , 589053 , 589512 , 589710 , 589726 , 589767 , 589800 , 590025 , 590047 , 590144 , 590285 , 590467 , 590514 , 592102 , 592190 , 592303 , 592371 , 592944 , 592959 , 593031 , 593604 , 593765 , 594051 , 594111 , 594220 , 594261 , 594340 , 594955 , 594961 , 595005 , 595100 , 595102 , 595339 , 595978 , 596188 , 596885 , 597003 , 597208 , 597272 , 597672 , 597825 , 598020 , 598084 , 598125 , 598137 , 598161 , 598233 , 598366 , 598410 , 599289 , 599616 , 599864 , 600034 , 600282 , 600297 , 600310 , 600350 , 600447 , 600471 , 600609 , 600616 , 600666 , 601655 , 602653 , 603516 , 603602 , 603876 , 604005 , 604183 , 604190 , 604206 , 604248 , 604280 , 604296 , 604478 , 604618 , 605263 , 605268 , 605308 , 605647 , 605694 , 605813 , 605894 , 606211 , 606353 , 606488 , 606547 , 606561 , 606585 , 606633 , 606648 , 607071 , 607637 , 607643 , 607826 , 607841 , 608256 , 608498 , 608590 , 608607 , 608673 , 608917 , 609504 , 609743 , 609780 , 610068 , 610084 , 610499 , 610793 , 610930 , 611047 , 611190 , 611202 , 611254 , 611575 , 611625 , 611642 , 612436 , 612495 , 613107 , 613144 , 613251 ) )
		OR ( "spark_id" IN ( 613603 , 613644 , 613816 , 613937 , 614101 , 614136 , 614333 , 614349 , 614538 , 614673 , 614687 , 614712 , 615233 , 615585 , 615587 , 615622 , 615774 , 616077 , 616097 , 616300 , 616564 , 616593 , 616686 , 616866 , 617071 , 617203 , 617231 , 617421 , 617549 , 617679 , 618071 , 618347 , 618518 , 618862 , 618913 , 619528 , 619667 , 619984 , 620000 , 620006 , 620017 , 620045 , 620134 , 620186 , 620227 , 620235 , 620309 , 620354 , 620440 , 620539 , 620767 , 620819 , 620833 , 620861 , 620876 , 620932 , 621107 , 621160 , 621165 , 621176 , 621260 , 621343 , 621373 , 621469 , 622195 , 622401 , 622565 , 622589 , 622757 , 622977 , 623062 , 623724 , 624030 , 624058 , 624063 , 624156 , 624352 , 624517 , 624521 , 624652 , 624856 , 625155 , 625227 , 625298 , 625474 , 625987 , 626142 , 626187 , 626300 , 626304 , 626374 , 626551 , 626709 , 626973 , 627629 , 627827 , 627972 , 628221 , 628492 , 628821 , 629275 , 629406 , 629988 , 629997 , 630122 , 630253 , 630475 , 630855 , 630932 , 630934 , 631005 , 631092 , 631101 , 631110 , 631112 , 631188 , 631325 , 631326 , 631469 , 631499 , 631600 , 631621 , 631689 , 631938 , 632032 , 632143 , 632543 , 632646 , 632824 , 632869 , 633154 , 633363 , 633473 , 633942 , 634033 , 634234 , 634415 , 634494 , 634527 , 634613 , 634962 , 634986 , 635445 , 635464 , 635669 , 635707 , 635776 , 635952 , 636128 , 636167 , 636193 , 636298 , 636710 , 636723 , 637917 , 638036 , 638117 , 638188 , 638225 , 638255 , 638283 , 638403 , 638633 , 638751 , 638911 , 639071 , 639088 , 639111 , 639288 , 639371 , 639686 , 639743 , 639900 , 640186 , 640273 , 640752 , 640872 , 640902 , 640998 , 641059 , 641108 , 641178 , 641247 , 641251 , 641312 , 641692 , 641729 , 641755 , 641850 , 641865 , 641911 , 642110 , 642146 , 642210 , 642252 , 642253 , 642411 , 642702 , 643042 , 643300 , 643320 , 643379 , 643443 , 643680 , 643682 , 643747 , 643858 , 643887 , 643948 , 643975 , 644076 , 644111 , 644249 , 644362 , 644443 , 644542 , 644692 , 645022 , 645239 , 645255 , 645401 , 645582 , 645859 , 645930 , 646036 , 646069 , 646296 , 646378 , 646491 , 646587 , 646679 , 646692 , 646837 , 647060 , 647120 , 647254 , 647323 , 647526 , 647595 , 647743 , 647754 , 647781 , 647798 , 647838 , 647927 , 648335 , 648378 , 648379 , 648445 , 648501 , 648990 , 649062 , 649167 , 649195 , 649483 ) )
		OR ( "spark_id" IN ( 649631 , 649689 , 649876 , 649907 , 649987 , 650076 , 650208 , 650509 , 650527 , 650614 , 650985 , 651989 , 652002 , 652150 , 652364 , 652880 , 652991 , 653208 , 653366 , 653462 , 653467 , 653474 , 653935 , 653990 , 654077 , 654119 , 655401 , 655863 , 655915 , 655945 , 655958 , 655967 , 656039 , 656134 , 656275 , 656383 , 656425 , 656598 , 656652 , 656718 , 656768 , 657518 , 657580 , 657856 , 658128 , 658157 , 658159 , 658172 , 658316 , 658405 , 658658 , 658939 , 658968 , 659377 , 659414 , 659550 , 659789 , 661017 , 661025 , 661094 , 661837 , 661976 , 662172 , 662947 , 663002 , 663213 , 663257 , 663398 , 663694 , 664113 , 664191 , 665253 , 665573 , 665708 , 666506 , 666579 , 666646 , 666871 , 667010 , 667121 , 667897 , 668140 , 668174 , 668370 , 668406 , 668439 , 668518 , 668690 , 669321 , 669628 , 669642 , 669816 , 669869 , 670256 , 670507 , 670584 , 670923 , 670946 , 671048 , 671089 , 671520 , 671597 , 671774 , 671833 , 671846 , 671958 , 672045 , 672421 , 672748 , 672971 , 673081 , 674260 , 674358 , 674433 , 674588 , 674847 , 674853 , 675110 , 675131 , 675209 , 675242 , 675940 , 676118 , 676161 , 676342 , 676417 , 676466 , 676479 , 676723 , 676785 , 676929 , 677298 , 677431 , 677443 , 677510 , 677926 , 677965 , 678709 , 678776 , 679053 , 679072 , 679227 , 679303 , 679339 , 679379 , 679463 , 679470 , 679594 , 679997 , 680252 , 681044 , 682410 , 682672 , 682858 , 683407 , 683496 , 683540 , 683832 , 683857 , 684072 , 684093 , 684305 , 684318 , 684402 , 684471 , 684984 , 685070 , 685823 , 686120 , 686151 , 686282 , 686343 , 686367 , 686440 , 686456 , 687153 , 687417 , 687465 , 687610 , 687627 , 687705 , 687886 , 688206 , 688336 , 688843 , 688873 , 688975 , 689025 , 689160 , 689220 , 689223 , 689233 , 689247 , 689327 , 689346 , 689359 , 689361 , 689456 , 689562 , 689802 , 689921 , 689937 , 690233 , 690655 , 690907 , 691079 , 691441 , 691453 , 691507 , 691508 , 691555 , 691597 , 692640 , 692887 , 692957 , 692959 , 693677 , 693851 , 694074 , 694219 , 694487 , 694494 , 694647 , 694764 , 695509 , 695615 , 695775 , 695921 , 696030 , 696281 , 696364 , 697139 , 697277 , 697540 , 698030 , 698211 , 698326 , 698450 , 698615 , 698854 , 699043 , 699055 , 699169 , 699212 , 699276 , 699295 , 699348 , 699548 , 699595 , 699609 , 699681 , 699705 , 699762 , 700311 , 700515 ) )
		OR ( "spark_id" IN ( 700709 , 700903 , 700988 , 701428 , 701499 , 701726 , 701782 , 701863 , 702046 , 702052 , 702122 , 702213 , 702250 , 702386 , 702496 , 703072 , 703239 , 703278 , 703291 , 703693 , 704285 , 704537 , 704877 , 705036 , 705277 , 705322 , 705380 , 705889 , 705958 , 705999 , 706046 , 706273 , 706496 , 706629 , 706707 , 706770 , 706778 , 706906 , 707786 , 707795 , 708059 , 708127 , 708241 , 708246 , 708254 , 708621 , 708663 , 708706 , 708898 , 709220 , 709588 , 709598 , 709740 , 709767 , 709820 , 709827 , 710112 , 710384 , 710471 , 710511 , 710548 , 710639 , 710664 , 710834 , 710997 , 711017 , 711055 , 711326 , 711402 , 711513 , 711541 , 711572 , 711623 , 712128 , 712182 , 712204 , 712399 , 712804 , 712824 , 712871 , 712898 , 712961 , 713009 , 713123 , 713168 , 713191 , 713207 , 713287 , 713428 , 713492 , 713496 , 713630 , 713696 , 713828 , 713830 , 714399 , 714824 , 715186 , 715298 , 715688 , 716029 , 716247 , 716313 , 716510 , 716968 , 717134 , 717253 , 717321 , 717660 , 717709 , 718174 , 718228 , 718233 , 718424 , 718514 , 719467 , 719471 , 719723 , 720031 , 720890 , 720893 , 721000 , 721536 , 721634 , 721701 , 721763 , 722088 , 722123 , 722505 , 722728 , 723156 , 723352 , 723604 , 723626 , 723716 , 723778 , 725206 , 725748 , 725753 , 725758 , 725965 , 726165 , 726367 , 726856 , 726905 , 727083 , 727191 , 727217 , 727351 , 727387 , 727470 , 727811 , 727987 , 728074 , 728112 , 728265 , 728319 , 728334 , 728369 , 728379 , 728488 , 728627 , 728722 , 728930 , 728977 , 729288 , 729527 , 729590 , 729841 , 729875 , 730063 , 730276 , 730427 , 730449 , 730669 , 730910 , 730952 , 731024 , 731098 , 731117 , 731138 , 731184 , 731353 , 731392 , 731566 , 731644 , 731660 , 731686 , 731733 , 731826 , 732716 , 732773 , 732868 , 732966 , 733184 , 733621 , 733628 , 733658 , 733776 , 733818 , 734101 , 734185 , 734224 , 734708 , 734712 , 735025 , 735332 , 735849 , 736024 , 736456 , 736681 , 736831 , 736841 , 737433 , 737885 , 738224 , 738850 , 738852 , 738973 , 739353 , 739579 , 739599 , 740251 , 740279 , 740336 , 741031 , 741222 , 741347 , 741446 , 741768 , 742062 , 742081 , 742189 , 742400 , 742473 , 742591 , 743084 , 743361 , 743491 , 743511 , 743515 , 744073 , 744186 , 744192 , 744527 , 744617 , 744831 , 744835 , 744865 , 745024 , 745326 , 745894 , 746017 , 746321 , 746742 ) )
		OR ( "spark_id" IN ( 746793 , 746811 , 747059 , 747146 , 747303 , 747363 , 747617 , 747708 , 747740 , 747745 , 747934 , 747936 , 748079 , 748095 , 748312 , 748350 , 748463 , 748662 , 748686 , 748768 , 748801 , 748823 , 748830 , 749311 , 749557 , 749658 , 750332 , 750627 , 750658 , 750824 , 751111 , 751251 , 751580 , 751590 , 751603 , 751609 , 751664 , 751822 , 751826 , 751921 , 752256 , 752569 , 752906 , 752936 , 753094 , 753129 , 753209 , 753257 , 753848 , 753974 , 754062 , 754450 , 754752 , 754833 , 754855 , 754886 , 754888 , 754927 , 755091 , 755182 , 755345 , 755423 , 755603 , 756008 , 756465 , 756938 , 757503 , 757931 , 758037 , 758179 , 758426 , 758743 , 759025 , 759080 , 759483 , 759645 , 759847 , 759930 , 760101 , 760102 , 760244 , 760378 , 760562 , 760589 , 760979 , 761323 , 761421 , 761422 , 761681 , 761795 , 761819 , 761847 , 762440 , 762467 , 762504 , 762584 , 762734 , 762821 , 762862 , 762974 , 763011 , 763249 , 763309 , 763372 , 763657 , 764351 , 764403 , 764440 , 764928 , 765101 , 765299 , 765823 , 765861 , 765896 , 765928 , 765943 , 766244 , 766500 , 767901 , 768209 , 768447 , 769762 , 770904 , 770945 , 771035 , 771789 , 771854 , 771887 , 772249 , 773305 , 773795 , 773833 , 774201 , 774220 , 774336 , 774434 , 775245 , 775285 , 775713 , 775942 , 776091 , 776286 , 776484 , 776724 , 777179 , 777398 , 777416 , 777767 , 777822 , 778104 , 778145 , 778858 , 778885 , 778951 , 779052 , 779164 , 779801 , 780371 , 780421 , 780556 , 780613 , 780814 , 781046 , 781255 , 781368 , 781395 , 781553 , 781585 , 781701 , 781803 , 781878 , 781921 , 782168 , 782179 , 782214 , 782425 , 782922 , 783249 , 783448 , 784275 , 785220 , 785297 , 785572 , 785630 , 785688 , 785746 , 785844 , 786084 , 786141 , 786581 , 786871 , 786984 , 787181 , 787369 , 787749 , 788106 , 788227 , 788304 , 788395 , 788466 , 788726 , 789152 , 789246 , 789738 , 789911 , 789991 , 790160 , 790302 , 790500 , 790590 , 790637 , 790692 , 790800 , 790824 , 791077 , 791341 , 791407 , 791971 , 792273 , 792347 , 792709 , 792941 , 793234 , 793342 , 793353 , 793427 , 793745 , 793762 , 794631 , 794660 , 795257 , 795904 , 796266 , 796456 , 796551 , 796833 , 797027 , 797112 , 797181 , 797253 , 797271 , 797320 , 797422 , 797447 , 797609 , 797911 , 797986 , 798141 , 798731 , 798763 , 798842 , 798904 , 799157 , 799232 , 799252 ) )
		OR ( "spark_id" IN ( 799265 , 799367 , 799520 , 799826 , 800227 , 800265 , 800754 , 800785 , 800790 , 800983 , 800996 , 801038 , 801163 , 801190 , 801564 , 801762 , 801810 , 802173 , 802358 , 802387 , 802615 , 802732 , 803026 , 803808 , 803951 , 804018 , 804190 , 804320 , 804997 , 805184 , 805262 , 805510 , 806177 , 806200 , 806598 , 806639 , 807232 , 807461 , 807983 , 808638 , 809049 , 809879 , 810495 , 811455 , 811980 , 812047 , 812142 , 812244 , 812603 , 812652 , 812654 , 812721 , 812733 , 812845 , 813003 , 813583 , 813620 , 813947 , 814022 , 814574 , 815160 , 815905 , 815917 , 816102 , 816571 , 816922 , 817188 , 817233 , 817496 , 817786 , 817855 , 817865 , 817888 , 817991 , 818021 , 818047 , 818116 , 818237 , 818524 , 818613 , 818619 , 818659 , 818883 , 818987 , 819293 , 819322 , 819503 , 819943 , 820178 , 820207 , 820478 , 820975 , 821109 , 821218 , 821796 , 821937 , 822197 , 822408 , 822692 , 822974 , 823021 , 823323 , 823324 , 823350 , 823363 , 823435 , 823680 , 823766 , 823791 , 823969 , 824018 , 824256 , 824293 , 825047 , 825158 , 825293 , 825409 , 825504 , 825681 , 826104 , 826186 , 826568 , 826628 , 826721 , 826727 , 826887 , 826972 , 827195 , 827202 , 827532 , 827543 , 827664 , 827785 , 827879 , 828167 , 828187 , 828340 , 828713 , 828893 , 828911 , 828918 , 829392 , 829807 , 830213 , 830642 , 830794 , 830996 , 831164 , 831256 , 831762 , 831823 , 832176 , 832484 , 832700 , 833206 , 833277 , 833509 , 833865 , 833965 , 833973 , 834125 , 834447 , 834593 , 834973 , 835164 , 835411 , 835444 , 835468 , 835492 , 835569 , 835589 , 835605 , 835704 , 835775 , 835781 , 835870 , 836236 , 836305 , 836358 , 837048 , 837113 , 837174 , 837265 , 837397 , 837716 , 837731 , 837864 , 838235 , 838499 , 838594 , 838624 , 838631 , 839001 , 839059 , 839349 , 839351 , 839605 , 839653 , 839904 , 839912 , 840035 , 840045 , 840375 , 840417 , 840547 , 840803 , 840911 , 841050 , 841053 , 841145 , 841371 , 841384 , 841489 , 841954 , 841960 , 842016 , 842139 , 842238 , 842366 , 842379 , 842569 , 842807 , 843224 , 843556 , 843576 , 844103 , 844141 , 844228 , 844233 , 844272 , 844308 , 844384 , 844581 , 844596 , 844910 , 845025 , 845074 , 845257 , 845272 , 845338 , 845727 , 845925 , 846068 , 846078 , 846516 , 846608 , 846610 , 846789 , 846893 , 846969 , 847401 , 847752 , 848651 , 848780 , 849030 ) )
		OR ( "spark_id" IN ( 850016 , 850199 , 850301 , 850784 , 850862 , 850929 , 850991 , 851475 , 851581 , 851701 , 851966 , 852131 , 852204 , 852455 , 852846 , 852901 , 852938 , 853036 , 853192 , 853843 , 854004 , 854308 , 854766 , 855173 , 855333 , 855539 , 856731 , 857368 , 857716 , 858018 , 858304 , 858510 , 858939 , 860987 , 861286 , 861900 , 862037 , 862448 , 863002 , 863176 , 863259 , 863394 , 863484 , 863492 , 863504 , 863593 , 864118 , 864282 , 864452 , 864477 , 864586 , 864923 , 864929 , 864955 , 865313 , 865533 , 865628 , 865660 , 865911 , 866702 , 868160 , 868258 , 868592 , 869102 , 869176 , 869409 , 869426 , 869719 , 869881 , 869953 , 870094 , 870228 , 870506 , 870580 , 870899 , 871116 , 871702 , 871768 , 872048 , 872209 , 872224 , 872549 , 873197 , 873988 , 874608 , 875227 , 875378 , 875704 , 876383 , 876525 , 877009 , 877148 , 877245 , 877623 , 878208 , 878450 , 878618 , 878621 , 878869 , 878906 , 879236 , 879475 , 879656 , 879726 , 879991 , 880001 , 880319 , 880404 , 880472 , 880531 , 880554 , 880912 , 880966 , 881262 , 881266 , 881427 , 881476 , 882047 , 882078 , 882156 , 882370 , 882991 , 883798 , 883849 , 884016 , 884058 , 884059 , 884576 , 884631 , 884761 , 885073 , 885136 , 885757 , 885817 , 886288 , 886332 , 886706 , 886737 , 886975 , 887747 , 887898 , 888009 , 888109 , 888221 , 888452 , 888793 , 888836 , 889040 , 889403 , 889539 , 889552 , 889691 , 889713 , 889875 , 889884 , 889893 , 890025 , 890034 , 890519 , 890639 , 890662 , 890719 , 890909 , 891101 , 891444 , 891586 , 891596 , 891609 , 892293 , 892351 , 892429 , 892473 , 892837 , 893099 , 893114 , 893225 , 893649 , 894104 , 894253 , 894411 , 894431 , 894585 , 894692 , 894960 , 895041 , 895353 , 895560 , 895647 , 896451 , 896683 , 896772 , 896817 , 897065 , 897181 , 897306 , 897464 , 897518 , 897534 , 897702 , 897905 , 898058 , 898068 , 898289 , 898662 , 898794 , 899198 , 899278 , 899326 , 899442 , 900037 , 900092 , 900323 , 900358 , 900521 , 901299 , 901306 , 901328 , 901343 , 901603 , 901703 , 901741 , 902081 , 902544 , 902820 , 902887 , 902983 , 903403 , 903452 , 903534 , 903718 , 903789 , 904740 , 905010 , 906273 , 906496 , 907632 , 908659 , 909059 , 909711 , 909809 , 911880 , 912546 , 912592 , 912755 , 912994 , 913852 , 913889 , 914047 , 914048 , 914050 , 914051 , 914195 , 914203 , 914218 , 914219 ) )
		OR ( "spark_id" IN ( 914220 , 914222 , 914227 , 914228 , 914230 , 914241 , 914256 , 914296 , 914302 , 914320 , 914328 , 914358 , 914366 , 914367 , 914368 , 914369 , 914370 , 914374 , 914376 , 914378 , 914379 , 914448 , 914449 , 914454 , 914457 , 914460 , 914476 , 914484 , 914494 , 914504 , 914571 , 914597 , 914598 , 914599 , 914600 , 914601 , 914621 , 914622 , 914623 , 914624 , 914631 , 914753 , 914754 , 914758 , 914800 , 914822 , 914826 , 914910 , 914933 , 914976 , 914978 , 914979 , 914980 , 914981 , 914982 , 914983 , 914984 , 914985 , 915075 , 915112 , 915116 , 915145 , 915146 , 915151 , 915152 , 915153 , 915300 , 915371 , 915372 , 915445 , 915449 , 915461 , 915464 , 915466 , 915472 , 915478 , 915485 , 915486 , 915488 , 915502 , 915503 , 915504 , 915505 , 915506 , 915507 , 915516 , 915517 , 915520 , 915521 , 915522 , 915523 , 915524 , 915527 , 915529 , 915532 , 915533 , 915538 , 915539 , 915590 , 915591 , 915624 , 915654 , 915659 , 915693 , 915703 , 915714 , 915715 , 915716 , 915717 , 915718 , 915719 , 915720 , 915721 , 915725 , 915726 , 915727 , 915732 , 915736 , 915737 , 915741 , 915743 , 915744 , 915745 , 915746 , 915747 , 915748 , 915749 , 915751 , 915752 , 915763 , 915764 , 915765 , 915783 , 915791 , 915795 , 915796 , 915797 , 915798 , 915799 , 915800 , 915801 , 915803 , 915823 , 915838 , 915852 , 915875 , 915910 , 915968 , 915976 , 916040 , 916041 , 916082 , 916199 , 916271 , 916287 , 916289 , 916320 , 916371 , 916440 , 916480 , 916498 , 916510 , 916511 , 916515 , 916516 , 916518 , 916519 , 916520 , 916521 , 916541 , 916543 , 916560 , 916608 , 916750 , 916777 , 916798 , 916800 , 916801 , 916802 , 916828 , 916829 , 916830 , 916831 , 916832 , 916833 , 916834 , 916852 , 916862 , 916943 , 917020 , 917022 , 917026 , 917027 , 917074 , 917080 , 917084 , 917100 , 917115 , 917116 , 917171 , 917191 , 917195 , 917211 , 917228 , 917271 , 917282 , 917295 , 917296 , 917297 , 917298 , 917307 , 917311 , 917329 , 917331 , 917341 , 917391 , 917444 , 917447 , 917461 , 917485 , 917492 , 917513 , 917515 , 917528 , 917529 , 917533 , 917535 , 917543 , 917551 , 917552 , 917555 , 917556 , 917582 , 917583 , 917588 , 917591 , 917592 , 917599 , 917601 , 917603 , 917604 , 917633 , 917667 , 917678 , 917682 , 917683 , 917707 , 917708 , 917709 , 917711 , 917712 , 917713 , 917718 , 917767 , 917777 ) )
		OR ( "spark_id" IN ( 917803 , 917809 , 917810 , 917811 , 917812 , 917814 , 917815 , 917854 , 917880 , 917894 , 917904 , 917909 , 917910 , 917959 , 917975 , 918008 , 918025 , 918035 , 918057 , 918071 , 918075 , 918087 , 918093 , 918094 , 918098 , 918100 , 918101 , 918104 , 918105 , 918135 , 918138 , 918140 , 918143 , 918146 , 918148 , 918151 , 918153 , 918158 , 918171 , 918172 , 918173 , 918183 , 918195 , 918202 , 918203 , 918204 , 918205 , 918211 , 918214 , 918221 , 918339 , 918342 , 918343 , 918344 , 918350 , 918351 , 918352 , 918357 , 918362 , 918378 , 918385 , 918387 , 918389 , 918392 , 918403 , 918404 , 918409 , 918412 , 918413 , 918414 , 918415 , 918421 , 918424 , 918431 , 918434 , 918435 , 918439 , 918452 , 918458 , 918509 , 918552 , 918639 , 918643 , 918644 , 918668 , 918761 , 918762 , 918763 , 918768 , 918769 , 918770 , 918771 , 918772 , 918795 , 918801 , 918802 , 918855 , 918857 , 918909 , 918921 , 918970 , 918971 , 918973 , 918974 , 918978 , 919004 , 919005 , 919014 , 919023 , 919024 , 919025 , 919026 , 919027 , 919029 , 919031 , 919033 , 919034 , 919039 , 919040 , 919041 , 919047 , 919056 , 919057 , 919061 , 919068 , 919069 , 919070 , 919071 , 919072 , 919073 , 919074 , 919075 , 919078 , 919079 , 919086 , 919087 , 919088 , 919089 , 919093 , 919094 , 919103 , 919104 , 919110 , 919111 , 919112 , 919113 , 919131 , 919132 , 919133 , 919137 , 919138 , 919139 , 919140 , 919219 , 919220 ) ) )
		AND ( "deleted_flag" = '0' ) );
                                      '''
                                  )
    @task(5)
    def long_query_1(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                  SELECT

    Ar.Bk_Hash,

    Ar.Spark_Id,

    Ar.Balance_Type,

    dap.period_name,

    Ar.Form_Name,

    Ar.Financial_Indicator_Code,

    TRUE AS status,

    Ar.Section_Name,

    Ar.Line_Code,

    Ar.Line_Name,

    Ar.Line_Value

FROM

    Dl_Spark.Accounting_Report_actual ar

    INNER JOIN (

        SELECT

            MAX(ar.Accounting_Report_id) m_id

        FROM

            Dl_Spark.Accounting_Report ar

            INNER JOIN Snbx_Creditroad.Cd_Inn Ci ON ci.spark_id = ar.spark_id

        WHERE

            ar.Valid_From BETWEEN to_date('2021-04-01', 'YYYY-MM-DD') --:sd --1922-06-06 00:00:00.000000 -- to_date('1922-06-06', 'YYYY-MM-DD')

            AND to_date('2021-04-18', 'YYYY-MM-DD') ---:ed -- 2022-06-09 00:00:00.000000 -- to_date('2022-06-09', 'YYYY-MM-DD')

        GROUP BY

            ar.Bk_Hash) arm ON arm.m_id = ar.Accounting_Report_id

    INNER JOIN dl_spark.dct_accounting_period dap ON dap.code = Ar.accounting_period_code

WHERE

   line_code = '2100';
                                  '''
                                  )

    @task(6)
    def long_query_2(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                  SELECT

    da.document_id AS document_xml_id,

    string_agg(DISTINCT ola.cadastral_num, ',') AS cadastral_num,

    string_agg(DISTINCT oa.src_object_id::varchar(255), ',') AS oks_xml_id,

    da.document_num AS document_num,

    da.document_issue_date AS document_date,

    fa.file_id AS file_id,

    fa.file_original_name AS file_name,

    fa.file_url_txt AS file_link

    -- Файл

FROM

    lkz_dds.file_actual fa

    -- Справочник типов файлов

    INNER JOIN lkz_dds.dct_file_type_actual dfta ON dfta.bkh = fa.file_type_bkh

        AND dfta.file_type_code = '10'

        -- Связь документа с файлом

    INNER JOIN lkz_dds.rel_document_file_actual rdfa ON rdfa.file_bkh = fa.bkh

    -- Документ

    INNER JOIN lkz_dds.document_actual da ON da.bkh = rdfa.document_bkh

        AND da.document_id IN (

            SELECT

                da.document_id

                -- Документ

            FROM

                lkz_dds.document_actual da

                -- Справочник типов документов

            INNER JOIN lkz_dds.dct_document_type_actual ddta ON ddta.bkh = da.document_type_bkh

                AND ddta.document_type_code = '4'

                -- Связь документа с объектом

            INNER JOIN lkz_dds.rel_document_object_actual rdoa ON rdoa.document_bkh = da.bkh

            -- Карточка объекта

            INNER JOIN lkz_dds.object_actual oa ON oa.src_object_id = rdoa.src_object_id

        WHERE

            oa.src_object_id IN ('19394', '27771', '30780', '27856', '4131', '25469', '27852', '4130', '27703', '30931', '25129', '1811', '6646', '17260', '15062', '27851', '12723', '25367', '31477', '33846', '31474', '4132', '33847', '17261', '25468', '27850', '25366', '4042', '19477', '19164', '27071', '27999', '27770', '31475', '27773', '20406', '27857', '34132', '27861', '4135', '4134', '21067', '33845', '31423', '32667', '34632', '25226', '27769', '35947', '27848', '27847', '26539', '21575', '12725', '9724', '35750', '4129', '25365', '27849', '29588', '27864', '9722', '27772', '29249', '31476', '27860', '29780', '17262', '4133', '4136', '33608', '38997', '27072', '37880', '36422', '26540', '32186', '32376', '40123', '32374', '32375', '32377', '32378', '30930', '39804', '39803', '4686', '9737', '9723', '9738', '9727', '9726', '9721', '9731', '9733', '9736', '9732', '9728', '9729', '9740', '9725', '9720', '9734', '9735', '9739', '9719', '9730', '34939', '41023', '10810', '41612', '41621', '41616', '41617', '41618', '41615', '41613', '41614', '41620', '25775', '39081', '39818', '41763', '42253', '38128', '38129', '38130', '41333', '41340', '42535', '42534', '42540', '27445', '38114', '39058', '39474', '39518', '30929', '33839', '33841', '33840', '42294', '24520', '25224', '25219', '25218', '38543', '35437', '41604', '35772', '41484', '36421', '2266', '38204', '42194', '42167', '37522', '38560', '43369', '43370', '36171', '36135', '21770', '43161', '38125', '37651', '37650', '36425', '37653', '36424', '37652', '39002', '42994', '32915', '4108', '43912', '43911', '4109', '38866', '40132', '40134', '41546', '40142', '40140', '40135', '33920', '41545', '40143', '40141', '40133', '38671', '33785', '29370', '35025', '37604', '11039', '5904', '37649', '24950', '9355', '22319', '33636', '21768', '12805', '22320', '31867', '36534', '33660', '33073', '33070', '21769', '7506', '33071', '1534', '26139', '12820', '24947', '37723', '7507', '33784', '7082', '37230', '33637', '19606', '24844', '21038', '37229', '33661', '37648', '24776', '25800', '37605', '37722', '33072', '1615', '1488', '33662', '37017', '12821', '29371', '14936', '25728', '18021', '33074', '33663', '38672', '17247', '5955', '41832', '5954', '37411', '37310', '37407', '37408', '39811', '42443', '37410', '36073', '41602', '41600', '41601', '36886', '13923', '41442', '36887', '17111', '17109', '17093', '17095', '17100', '12026', '12016', '17103', '17112', '12023', '17098', '12024', '17096', '12020', '17091', '17105', '17094', '36925', '44036', '17104', '12018', '12017', '17102', '17097', '12022', '17108', '12015', '17099', '17107', '17101', '17106', '17113', '12027', '12731', '44118', '12019', '17110', '17092', '12025', '12028', '12021', '35368', '35381', '35384', '35382', '35376', '35369', '35380', '35375', '35377', '35378', '35379', '32586', '42319', '44171', '39001', '37140', '44172', '32587', '42318', '42321', '32588', '33916', '42320', '37603', '36656', '38846', '19784', '41422', '2263', '2264', '2265', '43932', '43964', '40130', '41156', '32654', '41154', '44326', '41164', '38332', '38542', '40138', '3929', '40136', '40131', '37606', '41149', '35345', '38330', '38331', '38329', '31589', '38825', '36397', '6974', '37325', '40688', '37521', '40933', '41646', '41644', '41651', '41645', '41649', '41650', '41656', '41647', '41648', '42149', '42150', '41843', '42113', '38300', '38299', '38302', '38298', '38301', '40379', '36924', '34544', '41219', '34545', '40273', '6975', '18146', '44014', '44603', '44484', '44604', '34841', '36819', '36273', '44670', '13142', '40687', '37322', '13144', '33848', '16822', '16823', '38869', '44884', '35603', '45148', '45147', '43810', '44882', '45243', '41153', '44639', '45255', '44688', '38614', '38714', '40601', '37323', '28447', '23336', '28448', '45362', '42856', '42857', '42895', '33843', '33842', '42918', '42858', '41726', '33534', '37238', '37234', '37239', '37243', '37244', '37258', '37247', '37240', '37256', '37252', '37251', '37261', '37249', '37253', '37232', '37242', '37236', '37254', '37245', '37259', '37235', '37237', '37246', '37233', '37250', '37241', '37257', '37255', '37262', '37231', '37248', '37260', '45252', '38001', '45251', '35433', '45238', '25055', '45250', '45253', '45254', '41150', '41151', '44970', '44974', '44973', '44971', '44975', '44972', '26496', '40716', '38740', '39163', '40137', '36423', '29565', '35533', '34205', '34195', '35524', '29569', '32643', '34198', '34196', '29566', '35532', '35531', '34201', '35534', '35526', '34209', '29563', '34190', '34189', '29572', '34204', '29578', '35536', '35535', '32639', '32642', '29568', '32645', '34194', '32648', '32630', '29570', '35528', '29574', '34210', '34207', '45275', '34200', '29577', '34199', '32641', '34208', '34203', '35525', '32631', '32640', '29573', '29564', '34187', '34197', '34191', '34188', '29567', '29575', '35527', '32638', '32644', '34193', '29571', '34202', '29576', '34192', '34186', '34206', '35529', '32647', '35530', '29579', '32637', '44622', '3326', '35746', '35744', '35749', '35745', '35221', '36272', '45510', '42323', '41142', '42322', '39530', '41152', '32635', '38009', '32634', '32633', '26705', '26704', '26133', '45796', '29451', '42317', '42302', '26134', '45733', '35747', '35748', '45394', '41619', '44671', '41605', '44994', '44995', '44993', '41447', '44689', '41603', '37483', '35383', '46049', '39270', '43860', '46069', '39286', '33513', '32636', '42406', '42408', '44143', '23340', '32632', '37182', '42407', '41761', '35084', '37215', '33844', '37324', '43481', '38613', '37932', '41487', '45862', '45805', '36235', '39310', '45002', '45004', '45003', '45000', '45006', '44999', '45005', '35508', '34169', '44842', '33309', '36794', '43167', '21170', '21171', '42388', '21172', '21173', '21182', '21183', '40789', '40795', '40794', '40803', '40780', '40792', '46444', '46445', '46442', '46438', '46446', '40798', '40786', '40791', '40800', '40790', '40781', '40784', '40801', '40804', '46439', '46441', '46450', '40785', '40783', '46451', '40787', '46440', '46443', '40797', '40796', '40782', '40799', '40802', '40788', '46447', '46448', '46449', '40793', '46506', '46505', '46504', '46507', '46509', '31790', '31791', '46508', '46495', '46498', '46496', '46500', '46469', '46493', '46502', '46497', '46521', '46522', '46503', '32929', '42893', '46494', '33760', '46501', '45341', '29084', '46499', '44174', '44173', '46523', '46326', '46325', '46322', '46324', '46470'))

    -- Справочник типов документов

    INNER JOIN lkz_dds.dct_document_type_actual ddta ON ddta.bkh = da.document_type_bkh

        AND ddta.document_type_code = '4'

        -- Связь документа с объектом

    INNER JOIN lkz_dds.rel_document_object_actual rdoa ON rdoa.document_bkh = da.bkh

    -- Карточка объекта

    INNER JOIN lkz_dds.object_actual oa ON oa.src_object_id = rdoa.src_object_id

    -- ПД 12.3. О кадастровом номере и площади земельного участка

    INNER JOIN lkz_dds.object_land_actual ola ON ola.object_bkh = oa.bkh

    -- Последняя актуальная РПД в рамках ПД

    INNER JOIN lkz_dds.project_declaration_prepared_actual pdpa ON pdpa.project_declaration_prepared_bkh = ola.project_declaration_bkh

GROUP BY

    da.document_id,

    fa.file_id;

                                  '''
                                  )

    @task(7)
    def long_query_3(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                 WITH le AS (SELECT * FROM dl_spark.legal_entity_actual a

                WHERE a.inn = '7707049388' and kpp ='784201001'

            )

  , str AS (SELECT * FROM dl_spark.state_contract_participant_actual a

                               WHERE a.spark_id IN (SELECT DISTINCT le.spark_id FROM le)

            )

select

  a.inn

, a.ogrn

, a.kpp

, dcpa.participant_inn_code customer_inn

, dcpa.participant_ogrn_code customer_ogrn

, lea.kpp customer_kpp

, lea.okopf_code customer_okopf_code

, lea.full_name_rus full_name_rus

, dcpa.participant_name short_name_rus

, sca.contract_date

, sca.currency_code

, sca.contract_sum

, sca.federallaw_code

, sca.contract_subject_txt

from le a

join str b

  on a.spark_id = b.spark_id

                and b.state_contract_role_code='2'--Поставщик

join dl_spark.dct_contract_participant_actual dcpa_supp

on a.inn=dcpa_supp.participant_inn_code

and b.contract_participant_code = dcpa_supp.code

--join dl_spark.dct_state_contract_role_actual dscra

--  on b.state_contract_role_code = dscra.code

--  and dscra.code = ''1'' --Заказчик

join str b2

on b.contract_code=b2.contract_code

and b2.state_contract_role_code='1'--Заказчик

join dl_spark.dct_contract_participant_actual dcpa

  on b2.contract_participant_code = dcpa.code

left join dl_spark.legal_entity_actual lea

   on dcpa.participant_spark_id = lea.spark_id

join dl_spark.state_contract_actual sca

  on b.contract_code = sca.code;

;
                                  '''
                                  )

    @task(8)
    def long_query_4(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                select count(*) from (

SELECT

    "Custom SQL Query"."agg_ods_description" AS "agg_ods_description",

    CAST("Custom SQL Query"."cadastral_doc_addition_txt" AS text) AS "cadastral_doc_addition_txt",

    CAST("Custom SQL Query"."cadastral_num" AS text) AS "cadastral_num",

    "Custom SQL Query"."cancel_date" AS "cancel_date",

    "Custom SQL Query"."cnt_ods_description" AS "cnt_ods_description",

    CAST("Custom SQL Query"."deal_num" AS text) AS "deal_num",

    "Custom SQL Query"."deal_price_amt" AS "deal_price_amt",

    "Custom SQL Query"."escrow" AS "escrow",

    "Custom SQL Query"."living" AS "living",

    CAST("Custom SQL Query"."region_code" AS text) AS "region_code",

    "Custom SQL Query"."registration_date" AS "registration_date",

    CAST("Custom SQL Query"."subject_description" AS text) AS "subject_description",

    "Custom SQL Query"."sum_ods_is_null" AS "sum_ods_is_null"

FROM ( SELECT DISTINCT ON (deal_num)

        cadastral_num,

        region_code,

        registration_date,

        cancel_date,

        deal_num,

        deal_price_amt,

        subject_description,

        living,

        escrow,

        cadastral_doc_addition_txt,

        agg_ods_description,

        cnt_ods_description,

        sum_ods_is_null

    FROM ( SELECT DISTINCT ON (cadastral_doc_addition_txt, cadastral_num, registration_date)

            cadastral_num,

            region_code,

            registration_date,

            cancel_date,

            deal_num,

            subject_description,

            living,

            escrow,

            cadastral_doc_addition_txt,

            max(deal_price_amt) AS deal_price_amt,

            array_agg(ods_description) AS agg_ods_description,

            count(*) AS cnt_ods_description,

            sum(ods_is_null) AS sum_ods_is_null

        FROM ( SELECT DISTINCT ON (ods_description, region_code, wk_dst)

                *

            FROM (

                SELECT

                    cadastral_num,

                    d.registration_date,

                    d.cancel_date,

                    d.region_code,

                    d.deal_num,

                    cadastral_doc_addition_txt,

                    deal_price_amt,

                    deal_price_txt,

                    d.subject_description,

                    deal_condition_txt,

                    coalesce(ods_description, subject_description) AS ods_description,

                    CASE WHEN ods_description IS NULL THEN

                        1

                    ELSE

                        0

                    END AS ods_is_null,

                    CASE WHEN upper(subject_description)

                    LIKE '%КВАРТИР%' THEN

                        1

                    ELSE

                        0

                    END AS living,

                    CASE WHEN (upper(d.deal_condition_txt)

                        LIKE '%ЭСКРОУ%'

                        OR upper(d.deal_condition_txt)

                        LIKE '%ЭКСРОУ%'

                        OR upper(d.deal_condition_txt)

                        LIKE '%ESCROW%') THEN

                        1

                    ELSE

                        0

                    END AS escrow,

                    to_char(d.registration_date + 1, 'YYYY-WW') AS wk_dst

                FROM

                    dl_egrn_rosreestr.deal_actual d

                    INNER JOIN dl_egrn_rosreestr.cadastral_doc_actual d2 ON d.bkh = d2.reference_bkh

                    LEFT JOIN dl_egrn_rosreestr.realty_actual d3 ON d3.bkh = d.realty_bkh

                    LEFT JOIN dl_egrn_rosreestr.share_subject_description_actual d4 ON d.bkh = d4.reference_bkh

                    LEFT JOIN dl_egrn_rosreestr.realty_address_actual d5 ON d3.bkh = d5.realty_bkh

                    LEFT JOIN dl_egrn_rosreestr.dct_region_actual d6 ON d6.bkh = d5.realty_region_bkh

                WHERE

                    d.registration_date > '2020-01-01'

                    AND cadastral_doc_type_bkh = '6538d008-0e48-9b8c-10a0-d228ec21f9ec'

                ORDER BY

                    cadastral_num,

                    deal_num,

                    ods_description,

                    cadastral_doc_addition_txt) ord_t) t

        GROUP BY

            1,

            2,

            3,

            4,

            5,

            6,

            7,

            8,

            9

        ORDER BY

            cadastral_doc_addition_txt,

            cadastral_num) tt

    ORDER BY

        deal_num,

        cadastral_num) "Custom SQL Query"

        ) t;


                                  '''
                                  )

    @task(9)
    def long_query_5(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                    SELECT DISTINCT ON (cadastral_num)
                                        cadastral_num,
                                        realty_type_bkh,
                                        region_code,
                                        now()::date AS create_dt
                                    FROM
                                        dl_egrn_rosreestr.realty_actual;
                                    '''
                                  )

    @task(10)
    def long_query_6(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                    WITH all_data AS (

    SELECT

        a.src_cian_id --id объявления

,

        agent.realty_agency_name --агентство недвижимости (банк дом рф и дом рф)

,

        a.price_amt --стоимость общая

,

        a.total_area_amt --площадь

,

        a.room_cnt --кол-во комнат

,

        a.housing_complex_name --жк

,

        stat.src_update_date valid_from --действует от (раньше было a.valid_from из таблицы actual, для табло такое же название надо оставить)

,

        MAX(stat.src_update_date) OVER (PARTITION BY a.src_cian_id) last_valid_from --последнее изменение -- ИЛИ BKH

        --, LAG(a.valid_from) OVER (PARTITION BY a.src_cian_id ORDER BY a.valid_from) prev_valid_date

        --, LEAD(a.valid_from) OVER (PARTITION BY a.src_cian_id ORDER BY a.valid_from) next_valid_date

,

        a.bkh,

        status.status_name "Исторический статус",

        adr.user_address_txt "Исторический адрес"

        --, COALESCE(LAG(a.price_amt, 1) OVER (PARTITION BY a.src_cian_id, a.bkh ORDER BY a.valid_from), 0) past_price

    FROM dl_cian.advert a

    JOIN dl_cian.advert_statistic stat ON stat.deleted_flag = FALSE

        AND stat.advert_bkh = a.bkh

        AND stat.valid_from = a.valid_from

    JOIN dl_cian.dct_realty_agency agent ON agent.bkh = a.realty_agency_bkh

        AND agent.deleted_flag = FALSE

        AND agent.realty_agency_name IN ('Банк ДОМ.РФ', 'ДОМ.РФ')

    JOIN dl_cian.dct_status status ON stat.deleted_flag = FALSE

        AND status.bkh = a.status_bkh

    LEFT JOIN dl_cian.address adr ON adr.deleted_flag = FALSE

        AND adr.src_realty_id = a.src_realty_id

    WHERE a.deleted_flag = FALSE

),

distinct_price AS (

    --объявления с изменениями цены

    SELECT

        a.src_cian_id

    FROM

        all_data a

    GROUP BY

        a.src_cian_id

    HAVING

        COUNT(DISTINCT price_amt) > 1 --может меняться не только цена, но и, например, статус, поэтому Distinct

),

real_adverts AS (

    --Предложение Бородина А. до внедрения изменений в ключ ЦИАН

    SELECT

        advert_bkh

    FROM (

        SELECT

            aa.bkh advert_bkh,

            RANK() OVER (PARTITION BY aa.src_cian_id ORDER BY stat.src_update_date DESC,

                stat.src_upload_date DESC) rn

        FROM dl_cian.advert_actual aa

        JOIN dl_cian.advert_statistic_actual stat ON stat.advert_bkh = aa.bkh

        JOIN dl_cian.dct_realty_agency_actual agent ON agent.bkh = aa.realty_agency_bkh

            AND agent.realty_agency_name IN ('Банк ДОМ.РФ', 'ДОМ.РФ')) t

    WHERE rn = 1

)

SELECT

    d.*

    --, LTRIM(COALESCE(to_char(date_part('day', d.valid_from - d.next_valid_date), '9999'), 'Новое объявление'), ' ')

,

    CASE status.status_name

    WHEN 'активно' THEN

        CURRENT_DATE - aa.create_date

    ELSE

        d.valid_from - aa.create_date

    END srok,

    status.status_name,

    aa.price_amt actual_price_amt,

    aa.total_area_amt actual_total_area_amt,

    aa.price_sqm_amt actual_price_sqm_amt,

    aa.create_date --дата создания

,

    aa.advert_url_txt --адрес (ссылка)

,

    bld_tp.building_type_name --тип здания

,

    aa.subway_minute_amt --время до станции метро

,

    aa.prepay_month_cnt --месяцев предоплаты

,

    aa.deposit_amt --депозит

,

    cat.advert_category_name --категория объявления

,

    ad_stat.view_cnt --кол-во просмотров

,

    adr.region_name --регион

,

    adr.settlement_name --город

,

    adr.user_address_txt --адрес, введённый пользователем

,

    CASE WHEN dis.src_cian_id IS NOT NULL THEN

        'Да'

    ELSE

        'Нет'

    END change_price

FROM

    dl_cian.advert_actual aa

    JOIN real_adverts r ON r.advert_bkh = aa.bkh

    LEFT JOIN all_data d ON aa.src_cian_id = d.src_cian_id --aa.bkh = d.bkh

    JOIN dl_cian.dct_status_actual status ON status.bkh = aa.status_bkh

    JOIN dl_cian.dct_advert_category_actual cat ON aa.advert_category_bkh = cat.bkh

    LEFT JOIN dl_cian.advert_statistic_actual ad_stat ON ad_stat.advert_bkh = aa.bkh

    LEFT JOIN dl_cian.address_actual adr ON adr.src_realty_id = aa.src_realty_id

    LEFT JOIN dl_cian.dct_building_type_actual bld_tp ON bld_tp.bkh = aa.building_type_bkh

    LEFT JOIN distinct_price dis ON dis.src_cian_id = aa.src_cian_id

WHERE

    aa.src_cian_id = 246598838 --236625768;


                                    '''
                                  )

    @task(11)
    def long_query_7(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                    WITH realty_location AS (

    SELECT

        aa.src_realty_id,

        aa.region_name

    FROM

        dl_cian.address_actual aa) ( SELECT DISTINCT ON (a.src_cian_id)

            a.src_cian_id,

            loc.region_name,

            a.price_sqm_amt,

            a.price_amt,

            a.currency_name,

            a.realty_latitude,

            a.realty_longitude,

            a.room_cnt,

            a.total_area_amt,

            daca.advert_category_code,

            daca.advert_category_name,

            dbca.building_class_type,

            dbca.building_class_name

        FROM

            dl_cian.advert a

        LEFT JOIN dl_cian.dct_advert_category_actual daca ON a.advert_category_bkh = daca.bkh

        LEFT JOIN dl_cian.dct_status_actual dsa ON a.status_bkh = dsa.bkh

        LEFT JOIN realty_location loc ON loc.src_realty_id = a.src_realty_id

        LEFT JOIN dl_cian.dct_housing_complex_block_actual dhcba ON a.housing_complex_block_code = dhcba.housing_complex_block_code

        LEFT JOIN dl_cian.dct_building_class_actual dbca ON dhcba.building_class_bkh = dbca.bkh

    WHERE

        a.deleted_flag = FALSE

        AND loc.region_name = 'Москва'

        AND dsa.status_code = 1

        AND a.valid_from < '2022-06-01'

    ORDER BY

        a.src_cian_id,

        a.valid_from DESC nulls LAST)

UNION ALL ( SELECT DISTINCT ON (a.src_cian_id)

        a.src_cian_id,

        loc.region_name,

        a.price_sqm_amt,

        a.price_amt,

        a.currency_name,

        a.realty_latitude,

        a.realty_longitude,

        a.room_cnt,

        a.total_area_amt,

        daca.advert_category_code,

        daca.advert_category_name,

        dbca.building_class_type,

        dbca.building_class_name

    FROM

        dl_cian.advert a

    LEFT JOIN dl_cian.dct_advert_category_actual daca ON a.advert_category_bkh = daca.bkh

    LEFT JOIN dl_cian.dct_status_actual dsa ON a.status_bkh = dsa.bkh

    LEFT JOIN realty_location loc ON loc.src_realty_id = a.src_realty_id

    LEFT JOIN dl_cian.dct_housing_complex_block_actual dhcba ON a.housing_complex_block_code = dhcba.housing_complex_block_code

    LEFT JOIN dl_cian.dct_building_class_actual dbca ON dhcba.building_class_bkh = dbca.bkh

WHERE

    a.deleted_flag = FALSE

    AND a.valid_from >= '2022-06-01'

    AND a.valid_from <= '2022-06-30 23:59:59'

    AND dsa.status_code = 1

    AND loc.region_name = 'Москва'

ORDER BY

    a.src_cian_id,

    a.valid_from DESC nulls LAST);

                                    '''
                                  )

    @task(12)
    def long_query_8(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                    SELECT

    realty_bkh,

    deal_bkh,

    ods_bkh,

    region_code,

    cadastral_num,

    cadastral_doc_num,

    registration_date,

    cancel_date,

    deal_num,

    deal_condition_txt,

    subject_description,

    ods_description,

    deal_price_txt,

    deal_price_amt,

    room_number_txt,

    room_name,

    floor_number_txt,

    plan_number_txt,

    room_area_amt,

    transfer_deadline_txt,

    now()::date AS create_dt

FROM (

    SELECT

        d.bkh AS deal_bkh,

        d4.bkh AS ods_bkh,

        d.registration_date,

        d.cancel_date,

        deal_num,

        d.region_code,

        d3.bkh AS realty_bkh,

        deal_condition_txt,

        subject_description,

        ods_description,

        deal_price_txt,

        cadastral_num,

        cadastral_doc_num,

        deal_price_amt,

        room_number_txt,

        room_name,

        floor_number_txt,

        plan_number_txt,

        room_area_amt,

        transfer_deadline_txt

    FROM

        dl_egrn_rosreestr.realty_actual d3

        JOIN dl_egrn_rosreestr.deal_actual d ON d3.bkh = d.realty_bkh

        JOIN (

            SELECT

                d2.*

            FROM

                dl_egrn_rosreestr.cadastral_doc_actual d2

                JOIN dl_egrn_rosreestr.dct_cadastral_doc_type_actual dct ON dct.bkh = d2.cadastral_doc_type_bkh

            WHERE

                dct.cadastral_doc_type_code::bigint = 558401010201) d2 ON d.bkh = d2.reference_bkh

            --

        LEFT JOIN dl_egrn_rosreestr.share_subject_description_actual d4 ON d.bkh = d4.reference_bkh

        LEFT JOIN dl_egrn_rosreestr.realty_address_actual d5 ON d3.bkh = d5.realty_bkh

        LEFT JOIN dl_egrn_rosreestr.dct_region_actual d6 ON d6.bkh = d5.realty_region_bkh

    WHERE

        TRUE

        AND extract(year FROM d.registration_date) >= 2021) foo;
        
                                    '''
                                  )

    @task(13)
    def long_query_9(self):
        self.client.execute_query(self.conn_string,
                                  '''
                                    WITH all_data AS (

    SELECT

        a.advert_id,

        a.src_cian_id --id объявления

,

        agent.realty_agency_name --агентство недвижимости (банк дом рф и дом рф)

,

        a.price_amt --стоимость общая

,

        a.total_area_amt --площадь

,

        a.price_sqm_amt --цена за кв м

,

        a.room_cnt --кол-во комнат

,

        a.housing_complex_name --жк

,

        stat.src_update_date valid_from --действует от (раньше было a.valid_from из таблицы actual, для табло такое же название надо оставить)

,

        MAX(stat.src_update_date) OVER (PARTITION BY a.src_cian_id) last_valid_from --последнее изменение -- ИЛИ BKH

        --, LAG(a.valid_from) OVER (PARTITION BY a.src_cian_id ORDER BY a.valid_from) prev_valid_date

        --, LEAD(a.valid_from) OVER (PARTITION BY a.src_cian_id ORDER BY a.valid_from) next_valid_date

,

        a.bkh,

        status.status_name "Исторический статус"

        --, adr.user_address_txt "Исторический адрес"

        --, COALESCE(LAG(a.price_amt, 1) OVER (PARTITION BY a.src_cian_id, a.bkh ORDER BY a.valid_from), 0) past_price

    FROM dl_cian.advert a

    JOIN dl_cian.advert_statistic stat ON stat.deleted_flag = FALSE

        AND stat.advert_bkh = a.bkh

        AND stat.valid_from = a.valid_from

    JOIN dl_cian.dct_realty_agency agent ON agent.bkh = a.realty_agency_bkh

        AND agent.deleted_flag = FALSE

        AND agent.realty_agency_name IN ('Банк ДОМ.РФ', 'ДОМ.РФ')

    JOIN dl_cian.dct_status status ON stat.deleted_flag = FALSE

        AND status.bkh = a.status_bkh

        --LEFT JOIN dl_cian.address_actual               adr         ON /*adr.deleted_flag = FALSE AND*/ adr.src_realty_id = a.src_realty_id --AND adr.valid_from = a.valid_from

    WHERE a.deleted_flag = FALSE

),

distinct_price AS (

    --объявления с изменениями цены

    SELECT

        a.src_cian_id

    FROM

        all_data a

    GROUP BY

        a.src_cian_id

    HAVING

        COUNT(DISTINCT price_amt) > 1 --может меняться не только цена, но и, например, статус, поэтому Distinct

),

real_adverts AS (

    --Предложение Бородина А. до внедрения изменений в ключ ЦИАН

    SELECT

        advert_bkh

    FROM (

        SELECT

            aa.bkh advert_bkh,

            RANK() OVER (PARTITION BY aa.src_cian_id ORDER BY stat.src_update_date DESC,

                stat.src_upload_date DESC) rn

        FROM dl_cian.advert_actual aa

        JOIN dl_cian.advert_statistic_actual stat ON stat.advert_bkh = aa.bkh

        JOIN dl_cian.dct_realty_agency_actual agent ON agent.bkh = aa.realty_agency_bkh

            AND agent.realty_agency_name IN ('Банк ДОМ.РФ', 'ДОМ.РФ')) t

    WHERE rn = 1

)

SELECT

    d.*

    --, LTRIM(COALESCE(to_char(date_part('day', d.valid_from - d.next_valid_date), '9999'), 'Новое объявление'), ' ')

,

    CASE status.status_name

    WHEN 'активно' THEN

        CURRENT_DATE - aa.create_date

    ELSE

        d.valid_from - aa.create_date

    END srok,

    status.status_name,

    aa.price_amt actual_price_amt,

    aa.total_area_amt actual_total_area_amt,

    aa.price_sqm_amt actual_price_sqm_amt,

    aa.create_date --дата создания

,

    aa.advert_url_txt --адрес (ссылка)

,

    bld_tp.building_type_name --тип здания

,

    aa.subway_minute_amt --время до станции метро

,

    aa.prepay_month_cnt --месяцев предоплаты

,

    aa.deposit_amt --депозит

,

    cat.advert_category_name --категория объявления

,

    ad_stat.view_cnt --кол-во просмотров

,

    adr.region_name --регион

,

    adr.settlement_name --город

,

    COALESCE(adr.user_address_txt, '(пусто)') user_address_txt --адрес, введённый пользователем

,

    COALESCE(aa.user_address_txt, '(пусто)') user_address_txt2 --адрес, введённый пользователем

,

    CASE WHEN dis.src_cian_id IS NOT NULL THEN

        'Да'

    ELSE

        'Нет'

    END change_price

FROM

    dl_cian.advert_actual aa

    JOIN real_adverts r ON r.advert_bkh = aa.bkh

    LEFT JOIN all_data d ON aa.src_cian_id = d.src_cian_id --aa.bkh = d.bkh

    JOIN dl_cian.dct_status_actual status ON status.bkh = aa.status_bkh

    JOIN dl_cian.dct_advert_category_actual cat ON aa.advert_category_bkh = cat.bkh

    LEFT JOIN dl_cian.advert_statistic_actual ad_stat ON ad_stat.advert_bkh = aa.bkh

    LEFT JOIN dl_cian.address_actual adr ON adr.src_realty_id = aa.src_realty_id

    LEFT JOIN dl_cian.dct_building_type_actual bld_tp ON bld_tp.bkh = aa.building_type_bkh

    LEFT JOIN distinct_price dis ON dis.src_cian_id = aa.src_cian_id

    --WHERE aa.src_cian_id = 266465072  --246598838 --236625768;

                                    '''
                                  )

class ADBUser(User):
    min_wait = 0
    max_wait = 0
    tasks = [CustomTaskSet]
    wait_time = between(min_wait, max_wait)

    def __init__(self, environment):
        super().__init__(environment)
        self.client = ADBClient()
